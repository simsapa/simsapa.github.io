{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simsapa Dhamma Reader","text":"<p>A sutta reader and Pali dictionary application.</p> <p>Download the latest build from Releases. On the first run, it downloads the application database and fulltext index.</p> <p>After the database download, the application can operate offline.</p> <p>A laptop with 8 GB RAM is sufficient to run Simsapa, see also Low Memory Mode and how to minimize memory usage.</p> <p>Installation guides: MacOS / Windows / Linux / from Source.</p> <p>A short feature demo:</p> <p>Slides PDF</p>"},{"location":"#screenshots","title":"Screenshots","text":"<p>See also: App Windows</p> <p></p> <p></p> <p></p>"},{"location":"development/manual-database-setup/","title":"Manual Database Setup","text":"<p>The application database can be downloaded and setup manually without too much technical difficulty.</p> <p>Find the asset files at the link below. The database version must agree with the app version in the major and minor version numbers, patch numbers are compatible.</p> <p>E.g. app version <code>v0.3.2</code> is compatible with db version <code>v0.3.0</code>, but not with <code>v0.2.0</code>.</p> <p>https://github.com/simsapa/simsapa-assets/releases</p> <p>You need at least three files:</p> <ul> <li><code>appdata.tar.bz2</code></li> <li><code>index.tar.bz2</code></li> <li><code>userdata.tar.bz2</code></li> </ul> <p>Move and extract these in the app's data folder, which is:</p> <ul> <li>MacOS: <code>~/Library/Application\\ Support/simsapa</code></li> <li>Windows: <code>C:\\Users\\%USERNAME%\\AppData\\Local\\simsapa\\simsapa</code></li> <li>Linux: <code>~/.local/share/simsapa</code></li> </ul> <p>For example:</p> <pre><code>cd ~/Library/Application\\ Support/simsapa\nls\nassets/  log.txt\n\n# Remove any existing assets\nrm -r assets/ log.txt\nmkdir assets\ncd assets\n\n# move the downloaded files here and extract\nmv ~/Downloads/*.tar.bz2\ntar xjf *.tar.bz2\n\n# remove the archives\nrm *.tar.bz2\n\n# Still in 'assets' folder, the contents should look like:\nls\nappdata.sqlite3  courses/  html_resources/  index/  userdata.sqlite3\n</code></pre> <p>After this, when you start the app, it should find the database.</p>"},{"location":"development/running-from-source/","title":"Development: Running from Source","text":""},{"location":"development/running-from-source/#linux-setup","title":"Linux Setup","text":""},{"location":"development/running-from-source/#development-tools","title":"Development Tools","text":"<p>Install Python 3.11 (possibly with your distro's pacakge manager)</p> <p>Install Rust (stable channel)</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>Type \"1\" to proceed with installation.</p> <p>Install Poetry</p> <pre><code>pipx install poetry\n</code></pre> <p>(On your system it could be <code>pip</code>, <code>pip3</code> or <code>pipx</code>)</p> <p>At this point the following commands should work:</p> <pre><code>python3 --version\npoetry --version\nrustup show\n</code></pre>"},{"location":"development/running-from-source/#clone-and-run-simsapa","title":"Clone and Run Simsapa","text":"<p>Clone the Simsapa repo and install Python packages.</p> <pre><code>git clone --depth=1 https://github.com/simsapa/simsapa.git\ncd simsapa\npoetry install\n</code></pre> <p>In the project root, enter a venv with poetry and start the app with:</p> <pre><code>poetry shell\npython3 run.py\n</code></pre>"},{"location":"development/running-from-source/#macos-setup","title":"MacOS Setup","text":""},{"location":"development/running-from-source/#development-tools_1","title":"Development Tools","text":"<p>Download XCode from the App Store.</p> <p>Install Homebrew</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>When the command finishes, it prints the commands to add Homebrew to your PATH under \"Next steps\".</p> <p>Install Python 3.11</p> <pre><code>brew install python@3.11\n</code></pre> <p>Install Rust (stable channel)</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>Type \"1\" to proceed with installation.</p> <p>Install NVM (Node Version Manager)</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <p>Close the terminal and open a new one to reload the environment variables.</p> <p>Install Node (stable)</p> <pre><code>nvm install stable\n</code></pre> <p>Install Poetry</p> <pre><code>pip3 install poetry\n</code></pre> <p>At this point the following commands should work:</p> <pre><code>python3 --version\npoetry --version\nrustup show\nnode --version\n</code></pre> <p>Install the sindresorhus/create-dmg tool</p> <pre><code>npm install --global create-dmg\n</code></pre>"},{"location":"development/running-from-source/#clone-and-run-simsapa_1","title":"Clone and Run Simsapa","text":"<p>Clone the Simsapa repo and install Python packages.</p> <p>(Commands one line at a time)</p> <pre><code>git clone --depth=1 https://github.com/simsapa/simsapa.git\ncd simsapa\npoetry install\n</code></pre> <p>To run the app using the Python source, in the <code>simsapa</code> folder, enter a venv with poetry and start the app with:</p> <pre><code>poetry shell\npython3 run.py\n</code></pre>"},{"location":"development/running-from-source/#build-the-dmg","title":"Build the .dmg","text":"<p>The repo uses the pydoit task runner.</p> <p>With no arguments (just <code>doit</code> \ud83d\udca5), the default task is <code>update_build_open</code>, which updates the repo, installs libs, builds the app, and opens the <code>dist/</code> folder. <code>doit list</code> shows the available tasks.</p> <p>In the project root folder:</p> <pre><code>poetry shell\ndoit\n</code></pre> <p>On success, the <code>dist/</code> folder should open. Double click on the <code>.dmg</code> file, drag the icon to Applications.</p>"},{"location":"development/running-from-source/#windows-setup","title":"Windows Setup","text":""},{"location":"development/running-from-source/#development-tools_2","title":"Development Tools","text":"<p>Install Python 3.11</p> <p>Download the Python 3.11 Windows Installer, use the link marked Recommended at the bottom of the page.</p> <p>Make sure to check Add Python 3.11 to PATH.</p> <p></p> <p>It is recommended to allow Disable path length limit.</p> <p></p> <p>Open a cmd.exe terminal to test:</p> <pre><code>python --version\nPython 3.11.0\n</code></pre> <p>Install Rust (stable channel)</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>Type \"1\" to proceed with installation.</p> <p>Install Poetry</p> <p>Open a terminal:</p> <pre><code>python -m pip install poetry\n</code></pre> <p>Test the command:</p> <p>At this point the following commands should work:</p> <pre><code>python3 --version\npoetry --version\nrustup show\n</code></pre>"},{"location":"development/running-from-source/#clone-and-run-simsapa_2","title":"Clone and Run Simsapa","text":"<p>Clone the Simsapa repo and install Python packages.</p> <pre><code>git clone --depth=1 https://github.com/simsapa/simsapa.git\ncd simsapa\npoetry install\n</code></pre> <p>In the project root, enter a venv with poetry and start the app with:</p> <pre><code>poetry shell\npython3 run.py\n</code></pre>"},{"location":"development/running-from-source/#env","title":".env","text":"<p>Environment variables can be set with a <code>.env</code> file is in the project root.</p> <p>Recognized settings:</p> <pre><code>ENABLE_PRINT_LOG=true\n</code></pre> <p>Print log messages as well as writing them to <code>~/.local/share/simsapa/log.txt</code></p> <pre><code>USE_TEST_DATA=true\n</code></pre> <p>Instead of connecting to database in the user's folders, connect to the test database found in <code>tests/data/assets/</code></p> <pre><code>ENABLE_WIP_FEATURES=false\n</code></pre> <p>Whether to enable work-in-progress feature which may be unstable or broken.</p>"},{"location":"development/running-from-source/#editing-application-windows-with-qt-designer","title":"Editing application windows with Qt Designer","text":"<p>Install Qt Designer and dependencies from the distro package manager (not <code>pip</code>).</p> <pre><code>sudo apt-get install qttools5-dev-tools python3-pyqt5 python3-pyqt5.qtquick libqt5designer5 libqt5designercomponents5\n</code></pre> <p>Open the <code>.ui</code> file in Qt Designer, in or out- of the project venv.</p> <pre><code>designer ./simsapa/assets/ui/dictionary_search_window.ui\n</code></pre> <p>After saving the <code>.ui</code>, re-generate the <code>.py</code> files. The Makefile target calls <code>pyuic5</code>.</p> <pre><code>make ui\n</code></pre> <p>Don't use the pip pacakges frequently recommended in tutorials (<code>pip install pyqt5 pyqt5-tools</code>), these are often compiled at different Qt versions, and may result in Qt Designer crashing with the following error:</p> <pre><code>...Qt/bin/designer: symbol lookup error: ...Qt/bin/designer: undefined symbol: _ZdlPvm, version Qt_5\n</code></pre>"},{"location":"features/app-windows/","title":"App Windows","text":""},{"location":"features/app-windows/#sutta-search","title":"Sutta Search","text":""},{"location":"features/app-windows/#sutta-study","title":"Sutta Study","text":""},{"location":"features/app-windows/#sutta-index","title":"Sutta Index","text":""},{"location":"features/app-windows/#dictionary-search","title":"Dictionary Search","text":""},{"location":"features/app-windows/#word-lookup","title":"Word Lookup","text":""},{"location":"features/app-windows/#bookmarks","title":"Bookmarks","text":""},{"location":"features/app-windows/#ebook-reader","title":"Ebook Reader","text":""},{"location":"features/app-windows/#memos","title":"Memos","text":""},{"location":"features/dhamma-texts/","title":"Dhamma Texts Included in Simsapa","text":""},{"location":"features/dhamma-texts/#suttas","title":"Suttas","text":"<ul> <li>suttacentral.net<ul> <li><code>pli</code> and <code>en</code> languages by default</li> <li>other languages as optional downloads via <code>Suttas &gt; Sutta Languages...</code> menu</li> </ul> </li> <li>tipitaka.org CST4 Cha\u1e6d\u1e6dha Sa\u1e45g\u0101yana Tipi\u1e6daka</li> <li>dhammatalks.org Translations by Aj Thanissaro</li> <li>tipitaka.net The Dhammapada: Verses and Stories Translated by Daw Mya Tin, M.A.</li> <li>A Dhammapada for Contemplation by Ajahn Munindo</li> <li>a-buddha-ujja.hu Hungarian sutta translations</li> <li>index.readingfaithfully.org Sutta Index of Topics</li> <li>The Silent Sages of Old Translations by Bhante Nyanadipa</li> <li>GRETIL Sanskrit Texts from GRETIL -- G\u00f6ttingen Register of Electronic Texts in Indian Languages</li> </ul>"},{"location":"features/dhamma-texts/#dictionaries","title":"Dictionaries","text":"<ul> <li><code>DPD</code> Digital P\u0101\u1e37i Dictionary digitalpalidictionary.github.io </li> <li><code>DPPN</code> Buddhist Dictionary of Pali Proper Names palikanon.com</li> <li><code>NYANAT</code> Manual of Buddhist Terms and Doctrines by Nyanatiloka palikanon.com </li> <li><code>PTS</code> The Pali Text Society's Pali-English dictionary dsal.uchicago.edu</li> <li><code>NCPED</code> suttacentral.net New Concise Pali English Dictionary by Ven. Buddhadatta</li> <li><code>CPD</code> Critical P\u0101li Dictionary cpd.uni-koeln.de</li> <li><code>COMM</code> P\u0101li commentary definitions of terms in Vinaya, late Khuddaka Nik\u0101ya, A\u1e6d\u1e6dhakath\u0101, \u1e6c\u012bk\u0101 and A\u00f1\u00f1\u0101.</li> <li><code>SBS-RU</code> Pali-Russian dictionary by Ven. Devamitta devamitta.github.io</li> <li><code>MW</code> Monier-Williams Sanskrit-English Dictionary, 1899 sanskrit-lexicon.uni-koeln.de</li> <li><code>Whitney</code> Whitney's Roots sanskritlibrary.org</li> <li><code>Wordnet</code> A Lexical Database for English wordnet.princeton.edu</li> </ul>"},{"location":"features/localhost-api/","title":"Localhost API","text":"<p>Simsapa starts a server on <code>http://localhost:4848</code> where it can receive queries and commands.</p> <p>The routes are defined in simsapa/app/api.py.</p> <p>Some examples:</p> <p>Open the Sutta Study Window:</p> <pre><code>curl 'http://localhost:4848/open_window/Sutta%20Study'\n</code></pre> <p>Open the Lookup Window and run a dictionary search:</p> <pre><code>curl 'http://localhost:4848/lookup_window_query/p\u0101\u1e6dimokkha'\n\ncurl -X POST --json '{ \"query_text\": \"kamma\" }' 'http://localhost:4848/lookup_window_query'\n</code></pre> <p>In the Sutta Study, open MN 2 in the first panel and find '\u0101sava', while also run a dictionary search for '\u0101sava'. Does not open the Sutta Study window if not already open.</p> <pre><code>curl -X POST --json '{ \"sutta_panels\": [ {\"sutta_uid\": \"mn2/pli/ms\", \"find_text\": \"\u0101sava\"} ], \"lookup_panel\": {\"query_text\": \"\u0101sava\"} }' 'http://localhost:4848/sutta_study'\n</code></pre> <p>Or in a Python script:</p> <pre><code>import requests\n\nparams = { \"sutta_panels\": [ {\"sutta_uid\": \"mn2/pli/ms\", \"find_text\": \"sappurisadhamma\"} ], \"lookup_panel\": {\"query_text\": \"sappurisadhamma\"} }\n\nrequests.post(\"http://localhost:4848/sutta_study\", json=params)\n</code></pre>"},{"location":"features/localhost-api/#public-routes","title":"Public routes","text":"<p>The following routes provide useful interfaces for external plugins and other apps to communicate with Simsapa.</p> <pre><code>@app.route('/suttas_fulltext_search', methods=['POST'])\n</code></pre> <p>Run a fulltext sutta query and return the results.</p> <pre><code>@app.route('/dict_combined_search', methods=['POST'])\n</code></pre> <p>Run a combined (DPD lookup + fulltext) dictionary query and return the results.</p> <pre><code>@app.route('/dict_words_flat_completion_list', methods=['GET'])\n</code></pre> <p>Return a list of words and roots from the DPD dictionary. This is a useful size for the plugins to load as autocompletion. A list of words from all dictionaries is too long for this purpose.</p> <pre><code>@app.route('/sutta_titles_flat_completion_list', methods=['GET'])\n</code></pre> <p>Returns a list of all sutta titles.</p> <pre><code>@app.route('/sutta_and_dict_search_options', methods=['GET'])\n</code></pre> <p>Returns values for search option dropdowns.</p> <pre><code>@app.route('/lookup_window_query/&lt;string:word&gt;', methods=['GET'])\n@app.route('/lookup_window_query/&lt;string:word&gt;/&lt;string:dict_label&gt;', methods=['GET'])\n@app.route('/lookup_window_query', methods=['POST'])\n</code></pre> <p>Run a lookup in the Lookup Window. This opens and raises the window.</p> <pre><code>@app.route('/sutta_study_lookup/&lt;string:word&gt;', methods=['GET'])\n@app.route('/sutta_study_lookup/&lt;string:word&gt;/&lt;string:dict_label&gt;', methods=['GET'])\n@app.route('/sutta_study_lookup', methods=['POST'])\n</code></pre> <p>Run a lookup in the dictionary panel of Sutta Study Window.</p> <pre><code>@app.route('/sutta_search', methods=['POST'])\n</code></pre> <p>Send commands to the Sutta Search Window.</p> <pre><code>@app.route('/sutta_study', methods=['POST'])\n</code></pre> <p>Send commands to the Sutta Study Window.</p> <pre><code>@app.route('/dictionary_search', methods=['POST'])\n</code></pre> <p>Send commands to the Dictionary Search Window.</p> <pre><code>@app.route('/suttas/&lt;string:sutta_ref&gt;', methods=['GET'])\n@app.route('/suttas/&lt;string:sutta_ref&gt;/&lt;string:lang&gt;', methods=['GET'])\n@app.route('/suttas/&lt;string:sutta_ref&gt;/&lt;string:lang&gt;/&lt;string:source_uid&gt;', methods=['GET'])\n</code></pre> <p>Retreive a sutta.</p> <pre><code>@app.route('/words/&lt;string:word&gt;', methods=['GET'])\n@app.route('/words/&lt;string:word&gt;/&lt;string:dict_label&gt;', methods=['GET'])\n@app.route('/words/&lt;string:word&gt;.json', methods=['GET'])\n@app.route('/words/&lt;string:word&gt;/&lt;string:dict_label&gt;.json', methods=['GET'])\n</code></pre> <p>Retreive a dictionary word.</p> <pre><code>@app.route('/open_window', defaults={'window_type': ''})\n@app.route('/open_window/&lt;string:window_type&gt;', methods=['GET'])\n</code></pre> <p>Open and raise a specific application window.</p>"},{"location":"features/localhost-api/#private-routes","title":"Private routes","text":"<p>The following routes are meant to be used internally by Simsapa.</p> <pre><code>@app.route('/queues/&lt;string:queue_id&gt;', methods=['POST'])\n@app.route('/assets/&lt;path:filename&gt;', methods=['GET'])\n@app.route('/generate_graph', methods=['POST'])\n@app.route('/get_bookmarks_with_range_for_sutta', methods=['POST'])\n@app.route('/get_bookmarks_with_quote_only_for_sutta', methods=['POST'])\n</code></pre>"},{"location":"features/search-queries/","title":"Search Queries","text":""},{"location":"features/search-queries/#search-modes-in-brief","title":"Search Modes in Brief","text":"<p>Sutta references are matched first. Typing mn8, sn 56.11, iti92 will list those suttas.</p> <p>Fulltext Match: it searches the content for keywords using the query expressions, non-accented letters matching accented ones. (I.e. it makes a query in the tantivy fulltext index and assigns scores to the results.)</p> <p>Fulltext search matches words in full, not in part, e.g. 'bodhi' will not match 'bodhisatta', but words are stemmed and will match declensions, e.g. 'bodhi\u1e41 / bodhiy\u0101'.</p> <p>Searching with a single P\u0101li word will return results which include the inflected forms, the results ranked by the frequency of the term.</p> <p>When searching for an exact text, use two or three words wrapped in double quotes, e.g. \"amatogadh\u0101 sabbe dhamm\u0101\" (including the quote marks).</p> <p>Prefixing the word with the '+' sign means a term must be included, the '-' signs means it must be excluded.</p> <p>bhikkhu +kamma -vipaka means should include 'bhikkhu', must include 'kamma', must exclude 'vipaka'.</p> <p>Title / Headword Match: it searches only the titles of suttas or the headwords of dictionary words. (SQL queries)</p>"},{"location":"features/search-queries/#fulltext-match-queries","title":"Fulltext Match Queries","text":"<p>Powered by the tantivy fulltext search engine. Read more in the QueryParser docs.</p> <p>The words in a query term are related as OR by default. kamma vip\u0101ka searches for entries which SHOULD include kamma OR vip\u0101ka, but not MUST include.</p> <p>Prefixing the word with the '+' sign means a term must be included, the '-' signs means it must be excluded.</p> <p>bhikkhu +kamma -vipaka means should include 'bhikkhu', must include 'kamma', must exclude 'vipaka'.</p> <p>The texts are indexed with P\u0101li, English, etc. grammar stemmers, so declension forms will also match in the appropriate language.</p> <ul> <li>dukkha will match dukkha\u1e41 / dukkh\u0101 / dukkh\u0101ni / dukkhena etc.,</li> <li>bhikkhu kamma vipaka will match bhikkhave kamm\u0101na\u1e41 vip\u0101ko,</li> <li>monk receives robes will match monks receiving robes.</li> </ul> <p>Latin terms are expanded to include diacritics, patipada will match pa\u1e6dipad\u0101.</p> <p>A pharse query is expressed with quote marks: \"pa\u1e6dhamena jh\u0101nena\".</p> <p>The query can match parts of the document:</p> <ul> <li>title:sticks cessation - match 'sticks' in the title, 'cessation' in the content</li> <li>word:kamma +work - match 'kamma' in the headword, must include 'work' in the content</li> <li>uid:pj4 - the uid should include 'pj4'</li> <li>upekkhindriya\u1e41 -source:cst4 - match 'upekkhindriya\u1e41' in the content, exclude all cst4 documents</li> <li>calmness +source:thanissaro - match 'calmness' in the content, only in documents by Bh. Thanissaro</li> <li>+\"buddhas of the past\" +source:bodhi - must include the phrase 'buddhas of the past', only in documents by Bh. Bodhi</li> </ul>"},{"location":"features/search-queries/#regex-search-icon","title":"Regex search (.* icon)","text":"<p>This option will parse the query as a regex pattern, but limited to globbing expressions, such as: <code>.* .+ a* a+</code></p> <p>The <code>.</code> (dot) matches any single character, <code>*</code> (asterisk) means 'zero or more' or the previous character, <code>+</code> (plus) means 'one or more'.</p> <ul> <li>a*vitak.* - the word start with zero or more of 'a', followed by 'vitak', followed by zero or more characters</li> <li>.*vitak.* - match any word containing 'vitak'</li> <li>vitak.* - match starting with 'vitak'</li> </ul>"},{"location":"features/search-queries/#fuzzy-search-icon","title":"Fuzzy search (~ icon)","text":"<p>This option allows matching words which may differ from the query by N number of characters (i.e. the Levenshtein Distance).</p> <p>Fuzzy search is not availble together with regex patterns.</p>"},{"location":"install/chromeos/","title":"ChromeOS","text":"<p>Since ChromeOS is a Linux system, the <code>AppImage</code> release should work. See the Linux install notes.</p>"},{"location":"install/linux/","title":"Install on Linux","text":"<p>Download the latest <code>.AppImage.zip</code> from Releases.</p> <p>Extract and add executable permissions to the <code>.AppImage</code> file.</p> <pre><code>chmod +x *.AppImage\n</code></pre> <p>Ubuntu 22.04: The HTML content pages will be blank, you have to start Simsapa with the following env variable:</p> <pre><code>QTWEBENGINE_DISABLE_SANDBOX=1 ./Simsapa_Dhamma_Reader-0.5.0a1-x86_64.AppImage\n</code></pre> <p>After the database downloads are completed, and the app is re-started, Simsapa creates a <code>.desktop</code> app launcher, and it can be started from the menu.</p> <p>The default location of the app launcher is: <code>~/.local/share/applications/simsapa.desktop</code></p> <p>If you encouter errors, see the Troubleshooting &gt; Linux page first.</p>"},{"location":"install/macos/","title":"Install on MacOS","text":"<p>Download the latest <code>.dmg.zip</code> from Releases.</p> <p>Take care to download the file suitable for your CPU, either <code>M1 (arm64)</code> or <code>Intel (x86_64)</code>.</p> <p>Extract and open the <code>.dmg</code> file.</p> <p>Drag the Simsapa icon to Applications.</p> <p>When starting the app, you will see a warning:</p> <p></p> <p>Allow apps from third-party locations:</p> <p>Open System Preferences &gt; Security &amp; Privacy &gt; General tab</p> <p></p> <p>Click on the lock icon in the bottom left and enter your admin password.</p> <p>Next to the message <code>\"Simsapa\" was blocked because...</code>, click <code>Open Anyway</code>.</p> <p>Starting the app with the icon will ask again:</p> <p></p>"},{"location":"install/macos/#references","title":"References","text":"<ul> <li>3 Ways To Run Unverified, Unidentified Developer Apps on Mac - Gadgets To Use</li> <li>How to open a Mac app from an unidentified developer | Macworld</li> </ul>"},{"location":"install/plugins/","title":"Browser and Editor Plugins","text":"<p>Github: simsapa/simsapa-extensions-and-plugins</p> <ul> <li>Firefox</li> <li>Chrome:<ul> <li>Install from the .zip file for the time being (see the steps below)</li> </ul> </li> <li>Obsidian<ul> <li>Install from Obsidian: Settings &gt; Community Plugins &gt; Browse</li> <li>Repo: simsapa-obsidian</li> </ul> </li> <li>Joplin<ul> <li>Install from Joplin: Tools &gt; Options &gt; Plugins</li> <li>Repo: simsapa-joplin</li> </ul> </li> <li>Emacs package</li> <li>Neovim plugin</li> <li>Google Docs addon</li> </ul> <p></p> <p></p>"},{"location":"install/plugins/#install-the-chrome-plugin","title":"Install the Chrome plugin","text":"<p>The Chrome plugin is not yet published in the web store.</p> <ul> <li>Download simsapa-chrome.zip</li> <li>Extract to a folder</li> <li>Open Menu &gt; Extensions &gt; Manage Extensions (<code>chrome://extensions/</code>)</li> <li>Enable <code>Developer mode</code> in the top-right corner</li> <li>Click <code>Load unpacked</code>, open the extracted extension folder</li> <li>The extension is now installed</li> <li>(\ud83d\udcd9 NOTE: Deleting the folder also removes the extension)</li> </ul>"},{"location":"install/portable-use/","title":"Portable Use","text":"<p>Simsapa can be used as a portable application, e.g. running it from a USB drive or a user folder.</p> <p>Create a <code>.env</code> file in the same folder as the executable binary.</p> <p>The <code>SIMSAPA_DIR=path/to/assets-dir</code> variable specifies the folder where the app should look for the database and other assets.</p> <p>If this is folder is on a USB, the drive letter has to be updated when a different machine assign a different drive letter.</p> <pre><code>SIMSAPA_DIR=E:\\simsapa-assets\n</code></pre> <p>If the assets are found in that folder, the Sutta Search window will open.</p> <p>If the assets are not found, they will be downloaded to the specified folder.</p>"},{"location":"install/uninstall/","title":"Uninstall","text":"<p>MacOS: Select the application icon and move it to the Bin.</p> <p>Windows: Delete the application folder and desktop icon.</p> <p>Linux: Delete the .AppImage file and .desktop launcher.</p>"},{"location":"install/uninstall/#removing-the-application-database","title":"Removing the Application Database","text":"<p>The Simsapa application database (where the suttas, dictionaries, etc. are stored) is not removed when un-installing Simsapa.</p> <p>Use the terminal to remove the applications local data folder:</p> <p>MacOS:</p> <pre><code>rm -r ~/Library/Application\\ Support/simsapa\n</code></pre> <p>Windows:</p> <pre><code>rmdir /s /q C:\\Users\\%USERNAME%\\AppData\\Local\\simsapa\n</code></pre> <p>Linux:</p> <pre><code>rm -r ~/.local/share/simsapa\n</code></pre>"},{"location":"install/windows/","title":"Install on Windows","text":"<p>Download the latest Windows <code>.zip</code> from Releases.</p> <p>Extract and move the folder, for example to <code>C:\\</code>.</p> <p>The <code>Simsapa Dhamma Reader.exe</code> starts the application. When running it the first time, it offers to download the database.</p> <p>To create a desktop shortcut:</p> <ul> <li>Select the .exe</li> <li>Holding Ctrl+Shift or Alt key, drag it to the desktop. While dragging, it should say \"Creating link to ...\" rather than moving the .exe file.</li> </ul> <p>The application notifies you when there is a new version available.</p> <p>To upgrade, simply delete the old Simsapa folder, download a new .zip, extract and move it to the same location.</p>"},{"location":"troubleshooting/linux/","title":"Linux","text":""},{"location":"troubleshooting/linux/#app-starts-but-html-content-pages-are-blank","title":"App starts, but HTML content pages are blank","text":"<p>Start Simsapa with the following env variable:</p> <pre><code>QTWEBENGINE_DISABLE_SANDBOX=1 ./Simsapa_Dhamma_Reader-0.2.0a1-x86_64.AppImage\n</code></pre>"},{"location":"troubleshooting/linux/#could-not-load-the-qt-platform-plugin-xcb-in-even-though-it-was-found","title":"Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found","text":"<p>Install <code>libxcb</code>:</p> <pre><code>sudo apt install libxcb-cursor0\n</code></pre>"},{"location":"troubleshooting/linux/#failed-to-load-module-xapp-gtk3-module","title":"Failed to load module 'xapp-gtk3-module'","text":"<pre><code>sudo apt install xapp\n</code></pre>"},{"location":"troubleshooting/linux/#the-wayland-connection-broke-did-the-wayland-compositor-die","title":"The Wayland connection broke. Did the Wayland compositor die?","text":"<p>Open the app launcher file:</p> <pre><code>gedit ~/.local/share/applications/simsapa.desktop\n</code></pre> <p>On the <code>Exec</code> line insert <code>QT_QPA_PLATFORM=xcb</code> before the AppImage path, see the example below.</p> <p>(\ud83d\udcd9 NOTE: replace /path/to/ with the actual path and the app filename to the correct version)</p> <pre><code>[Desktop Entry]\nEncoding=UTF-8\nName=Simsapa\nIcon=simsapa\nTerminal=false\nType=Application\nExec=env QTWEBENGINE_DISABLE_SANDBOX=1 QT_QPA_PLATFORM=xcb /path/to/Simsapa_Dhamma_Reader-0.5.0a1-x86_64.AppImage\n</code></pre>"},{"location":"troubleshooting/low-memory-mode/","title":"Low Memory Mode","text":"<p>A laptop with 8 GB RAM is sufficient to run Simsapa.</p> <p>By default incremental search is on, i.e. a search starts when you stop or pause while typing. This can be slow on older computers, turn it off with:</p> <ul> <li>Find &gt; Search As You Type: OFF</li> </ul> <p>In normal operation, Simsapa uses about 1-3 GB RAM, depending on how many windows and suttas are open.</p> <p>Each tab which renders HTML is an embedded Chromium instance (Qt WebEngine), so its memory consumption can be compared to a browser with a few open web pages.</p> <p>To minimize memory usage, these settings minimize the loaded window types and HTML renderer tabs:</p> <ul> <li>File &gt; Start in Low Memory Mode ON (disables pre-loading windows)</li> <li>File &gt; Tray Click Opens Window: the window you use most often, e.g. Sutta Study</li> <li>Windows &gt; First Window on Startup: the same as above, e.g. Sutta Study</li> <li>Suttas &gt; Show Related Suttas OFF (disables automatically opening sutta translations)</li> </ul> <p>This way the app uses about 450 - 500 MB RAM.</p>"}]}