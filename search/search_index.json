{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simsapa Dhamma Reader","text":"<p>A sutta reader and Pali dictionary application.</p> <p>Download the latest build from Releases. On the first run, it downloads the application database and fulltext index.</p> <p>Installation guides: MacOS / Windows / Linux / from Source.</p> <p>A short feature demo:</p> <p></p> <p></p> <p></p>"},{"location":"development/manual-database-setup/","title":"Manual Database Setup","text":"<p>The application database can be downloaded and setup manually without too much technical difficulty.</p> <p>Find the asset files at the link below. The database version must agree with the app version in the major and minor version numbers, patch numbers are compatible.</p> <p>E.g. app version <code>v0.3.2</code> is compatible with db version <code>v0.3.0</code>, but not with <code>v0.2.0</code>.</p> <p>https://github.com/simsapa/simsapa-assets/releases</p> <p>You need at least three files:</p> <ul> <li><code>appdata.tar.bz2</code></li> <li><code>index.tar.bz2</code></li> <li><code>userdata.tar.bz2</code></li> </ul> <p>Move and extract these in the app's data folder, which is:</p> <ul> <li>MacOS: <code>~/Library/Application\\ Support/simsapa/simsapa</code></li> <li>Windows: <code>C:\\Users\\%USERNAME%\\AppData\\Local\\simsapa\\simsapa</code></li> <li>Linux: <code>~/.local/share/simsapa</code></li> </ul> <p>For example:</p> <pre><code>cd ~/Library/Application\\ Support/simsapa/simsapa\nls\nassets/  log.txt\n\n# Remove any existing assets\nrm -r assets/ log.txt\nmkdir assets\ncd assets\n\n# move the downloaded files here and extract\nmv ~/Downloads/*.tar.bz2\ntar xjf *.tar.bz2\n\n# remove the archives\nrm *.tar.bz2\n\n# Still in 'assets' folder, the contents should look like:\nls\nappdata.sqlite3  courses/  html_resources/  index/  userdata.sqlite3\n</code></pre> <p>After this, when you start the app, it should find the database.</p>"},{"location":"development/running-from-source/","title":"Development: Running from Source","text":""},{"location":"development/running-from-source/#linux-macos-setup","title":"Linux / MacOS Setup","text":"<ul> <li>Install Python 3.11</li> <li>Install Poetry</li> <li>Clone this repo and run <code>poetry install</code> to install dependencies</li> </ul> <p>In the project root, enter a venv with poetry and start the app with:</p> <pre><code>poetry shell\n./run.py\n</code></pre>"},{"location":"development/running-from-source/#windows-setup","title":"Windows Setup","text":""},{"location":"development/running-from-source/#install-python-311","title":"Install Python 3.11","text":"<p>Download the Python 3.11 Windows Installer, use the link marked Recommended at the bottom of the page.</p> <p>Make sure to check Add Python 3.11 to PATH.</p> <p></p> <p>It is recommended to allow Disable path length limit.</p> <p></p> <p>Open a cmd.exe terminal to test:</p> <pre><code>python --version\nPython 3.11.0\n</code></pre>"},{"location":"development/running-from-source/#install-poetry","title":"Install Poetry","text":"<p>Open a terminal:</p> <pre><code>python -m pip install poetry\n</code></pre> <p>Test the command:</p> <pre><code>poetry --version\nPoetry (version 1.2.2)\n</code></pre>"},{"location":"development/running-from-source/#download-the-simsapa-sources","title":"Download the Simsapa sources","text":"<p>Git clone the simsapa repo, or click the green <code>[Code]</code> button and select <code>Download ZIP</code>.</p> <p>Open a cmd.exe terminal, install the python libraries:</p> <pre><code>poetry install\n</code></pre> <p>Activate the python virtual environment with poetry, and start Simsapa:</p> <pre><code>poetry shell\npython run.py\n</code></pre>"},{"location":"development/running-from-source/#env","title":".env","text":"<p>Environment variables can be set with a <code>.env</code> file is in the project root.</p> <p>Recognized settings:</p> <pre><code>ENABLE_PRINT_LOG=true\n</code></pre> <p>Print log messages as well as writing them to <code>~/.local/share/simsapa/log.txt</code></p> <pre><code>USE_TEST_DATA=true\n</code></pre> <p>Instead of connecting to database in the user's folders, connect to the test database found in <code>tests/data/assets/</code></p> <pre><code>ENABLE_WIP_FEATURES=false\n</code></pre> <p>Whether to enable work-in-progress feature which may be unstable or broken.</p>"},{"location":"development/running-from-source/#editing-application-windows-with-qt-designer","title":"Editing application windows with Qt Designer","text":"<p>Install Qt Designer and dependencies from the distro package manager (not <code>pip</code>).</p> <pre><code>sudo apt-get install qttools5-dev-tools python3-pyqt5 python3-pyqt5.qtquick libqt5designer5 libqt5designercomponents5\n</code></pre> <p>Open the <code>.ui</code> file in Qt Designer, in or out- of the project venv.</p> <pre><code>designer ./simsapa/assets/ui/dictionary_search_window.ui\n</code></pre> <p>After saving the <code>.ui</code>, re-generate the <code>.py</code> files. The Makefile target calls <code>pyuic5</code>.</p> <pre><code>make ui\n</code></pre> <p>Don't use the pip pacakges frequently recommended in tutorials (<code>pip install pyqt5 pyqt5-tools</code>), these are often compiled at different Qt versions, and may result in Qt Designer crashing with the following error:</p> <pre><code>...Qt/bin/designer: symbol lookup error: ...Qt/bin/designer: undefined symbol: _ZdlPvm, version Qt_5\n</code></pre>"},{"location":"install/linux/","title":"Install on Linux","text":"<p>Download the latest <code>.AppImage.zip</code> from Releases.</p> <p>Extract and add executable permissions to the <code>.AppImage</code> file.</p> <pre><code>chmod +x *.AppImage\n</code></pre> <p>Ubuntu 22.04: The HTML content pages will be blank, you have to start Simsapa with the following env variable:</p> <pre><code>QTWEBENGINE_DISABLE_SANDBOX=1 ./Simsapa_Dhamma_Reader-0.2.0a1-x86_64.AppImage\n</code></pre> <p>For the app launcher, it can be useful to create a <code>simsapa.desktop</code> file in <code>~/.local/share/applications</code> such as:</p> <pre><code>[Desktop Entry]\nEncoding=UTF-8\nName=Simsapa\nTerminal=false\nType=Application\nExec=env QTWEBENGINE_DISABLE_SANDBOX=1 /path/to/Simsapa_Dhamma_Reader-0.2.0a1-x86_64.AppImage\n</code></pre>"},{"location":"install/macos/","title":"Install on MacOS","text":"<p>Download the latest <code>.dmg.zip</code> from Releases.</p> <p>Take care to download the file suitable for your CPU, either <code>M1 (arm64)</code> or <code>Intel (x86_64)</code>.</p> <p>Extract and open the <code>.dmg</code> file.</p> <p>Drag the Simsapa icon to Applications.</p> <p>Allow apps from third-party locations:</p> <p>Open System Preferences &gt; Security &amp; Privacy &gt; General tab</p> <p>Click on the lock icon in the bottom left and enter your admin password.</p> <p>Next to the message <code>\"Simsapa\" was blocked because...</code>, click <code>Open Anyway</code>.</p>"},{"location":"install/uninstall/","title":"Uninstall","text":"<p>MacOS: Select the application icon and move it to the Bin.</p> <p>Windows: Delete the application folder and desktop icon.</p> <p>Linux: Delete the .AppImage file and .desktop launcher.</p>"},{"location":"install/uninstall/#removing-the-application-database","title":"Removing the Application Database","text":"<p>The Simsapa application database (where the suttas, dictionaries, etc. are stored) is not removed when un-installing Simsapa.</p> <p>Use the terminal to remove the applications local data folder:</p> <p>MacOS:</p> <pre><code>rm -r ~/Library/Application\\ Support/simsapa\n</code></pre> <p>Windows:</p> <pre><code>rmdir /s /q C:\\Users\\%USERNAME%\\AppData\\Local\\simsapa\n</code></pre> <p>Linux:</p> <pre><code>rm -r ~/.local/share/simsapa\n</code></pre>"},{"location":"install/windows/","title":"Install on Windows","text":"<p>Download the latest Windows <code>.zip</code> from Releases.</p> <p>Extract and move the folder, for example to <code>C:\\</code>.</p> <p>The <code>Simsapa Dhamma Reader.exe</code> starts the application.</p> <p>Create a desktop shortcut to the .exe with Alt+Drag*.</p>"},{"location":"install/windows/#fix-audio-playback-dll-file-name-bug","title":"Fix Audio Playback (.dll file name bug)","text":"<p>The Qt audio playback has a bug which expects the wrong .dll filename on Windows, it can be fixed as shown below.</p> <p>\"Failed to setup resampler\" when starting QAudioSink</p>"}]}